Principles

Any time you know there is a limit on the range of values in an array, then
sorting it or finding the top K elements can be in O(N) time rather than O(N
log N), since you can use a radix sort approach

Examples:  347


Whenever you can recognize a nested interval structure in a problem, a stack
applies.  The simplest example of this is to number the positions of matching
parentheses in a string using a stack.

Examples:  85


Once you have a solution, ask whether your intermediate calculations are being
calculated too early, or released too late.  Especially in array processing,
sometimes the result array may be able to be constructed in stages and the
space used for the result array doubling as an intermediate calcualtion.

Examples:  238


Don't forget the 'shrinking search space' approach.  Most problems can be
conceptualized as finding an element of a 'search space'.  For instance,
finding a subarray of an array maximizing some quantity, the search space
consists of all i, j such that 0 <= i < n, 0 <= j < n, i < j.  This can be
visualized as the upper triangle, not including diagonal, of the i, j matrix.
If you can make arguments about which elements in this space are bounded by
other elements, then you can strategically evaluate only a subset of elements
to shrink the search space.

Example:  11


When it doesn't seem like there is a clever solution, there may not be.  One
line of thinking is the pessimistic one, which is to try to establish a minimum
complexity for a given task.  In the shortest word distance problem (244), you
could note that in the worst case, you need to know every location for each 

Example: 244


When doing complex loop processing, make sure you distinguish between
situations that need only test a single element at a time, vs those that
must test a pair (or larger window).  In the latter case, consider using the
main loop variable to represent either the first or second element of that
window, and use whatever is most convenient.

Example: 443


Recursive problems all have an aspect of a 'leap of faith'.  You first assume
that you *already have a function* that can solve a subproblem of your problem.
But, this function may need to provide (through returning, or a global variable)
some auxiliary information needed to glue the subproblem(s) together to form
the solution of the main problem.  For example, in the 'Flatten Binary Search
Tree' problem, it's clear that if you can flatten the left subtree and flatten
the right subtree, you could glue them together in tandem from the node.
However, in order to do this conveniently, you need to know the leaf node for
the two flattened subtrees.  You need to know the left leaf node, because it
then gets attached to the right subtree.  You need to know the right leaf node 
because it becomes the main leaf node of the main tree, and thus return it.

Example: 114



